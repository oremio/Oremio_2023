<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: all in one, Page: assert()依赖于NDEBUG 宏 NDEBUG这个宏是C/C++标准规定的，所有编译器都有对它的支持。 (1)      调试(Debug)模式编译时，编译器不会定义NDEBUG，所以assert()宏起作用。(2)      发行(Release)模式编译时，编译器自动定义宏NDEBUG，使assert不起作用 .">
<meta http-equiv="keywords" content="SuperMemo, all in one, assert()依赖于NDEBUG 宏 NDEBUG这个宏是C/C++标准规定的，所有编译器都有对它的支持。 (1)      调试(Debug)模式编译时，编译器不会定义NDEBUG，所以assert()宏起作用。(2)      发行(Release)模式编译时，编译器自动定义宏NDEBUG，使assert不起作用 .">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 18.05)">
<title>all in one: assert()依赖于NDEBUG 宏 NDEBUG这个宏是C/C++标准规定的，所有编译器都有对它的支持。 ... (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">all in one: assert()依赖于NDEBUG 宏 NDEBUG这个宏是C/C++标准规定的，所有编译器都有对它的支持。 ... </font></b><br>(1 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="2673.htm"> - Next</a> - <a href="3353.htm">Previous</a> - <a href="1671.htm">Parent</a> - <a href="3353.htm">Previous sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">C++</a></li>
<ul>
<li><a href="2547.htm">基础</a></li>
<ul>
<li><a href="1671.htm">基础中的基础</a></li>
<ul>
<li>This page: assert()依赖于NDEBUG 宏 NDEBUG这个宏是C/C++标准规定的，所有编译器都有对它的支持。 (1)      调试(Debug)模式编译时，编译器不会定义NDEBUG，所以assert()宏起作用。(2)      发行(Release)模式编译时，编译器自动定义宏NDEBUG，使assert不起作用 .</li>
<ol>
<li>assert()依赖于NDEBUG 宏  NDEBUG这个宏是C/C++标准规定的，所有编译器都有对它的支持。  1. 调试(Debug)模式编译时，编译器不会定义NDEBUG，所以assert()宏起作用 2. 发行(Release)模式编译时，编译器自动定义宏NDEBUG，使assert不起作用 . (see <a href="#2565">below)</a>
</ol>
</ul>
</ul>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<div align="center">
<center>
<table border="4" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFFF00" bordercolor="#FF0000">
<tr>
<td>
<b>Subject: Topic #3,381: assert()&#20381;&#36182;&#20110;NDEBUG &#23439; NDEBUG&#36825;&#20010;&#23439;&#26159;C/C++&#26631;&#20934;&#35268;&#23450;&#30340;&#65292;&#25152;&#26377;&#32534;&#35793;&#22120;&#37117;&#26377;&#23545;&#23427;&#30340;&#25903;&#25345;&#12290; (1)      &#35843;&#35797;(Debug)&#27169;&#24335;&#32534;&#35793;&#26102;&#65292;&#32534;&#35793;&#22120;&#19981;&#20250;&#23450;&#20041;NDEBUG&#65292;&#25152;&#20197;assert()&#23439;&#36215;&#20316;&#29992;&#12290;(2)      &#21457;&#34892;(Release)&#27169;&#24335;&#32534;&#35793;&#26102;&#65292;&#32534;&#35793;&#22120;&#33258;&#21160;&#23450;&#20041;&#23439;NDEBUG&#65292;&#20351;assert&#19981;&#36215;&#20316;&#29992; .</b><p>
</td>
</tr>
<tr>
<td bordercolor="#FFCC00">
assert()&#20381;&#36182;&#20110;NDEBUG &#23439; 
<P></P>
<P>NDEBUG&#36825;&#20010;&#23439;&#26159;C/C++&#26631;&#20934;&#35268;&#23450;&#30340;&#65292;&#25152;&#26377;&#32534;&#35793;&#22120;&#37117;&#26377;&#23545;&#23427;&#30340;&#25903;&#25345;&#12290; </P>
<P>1. &#35843;&#35797;(Debug)&#27169;&#24335;&#32534;&#35793;&#26102;&#65292;&#32534;&#35793;&#22120;&#19981;&#20250;&#23450;&#20041;NDEBUG&#65292;&#25152;&#20197;assert()&#23439;&#36215;&#20316;&#29992;</P>
<P>2. &#21457;&#34892;(Release)&#27169;&#24335;&#32534;&#35793;&#26102;&#65292;&#32534;&#35793;&#22120;&#33258;&#21160;&#23450;&#20041;&#23439;NDEBUG&#65292;&#20351;assert&#19981;&#36215;&#20316;&#29992;</P>
<P>&#22914;&#26524;&#35201;&#24378;&#21046;&#20351;&#24471;assert()&#29983;&#25928;&#25110;&#32773;&#20351;&#24471;assert()&#19981;&#29983;&#25928;&#65292;&#21482;&#35201;&#25163;&#21160; #define NDEBUG &#25110;&#32773; #undef NDEBUG&#21363;&#21487;&#12290;</P>
<P>&nbsp;</P>
<P>static_assert (bool_constexpr, message)</P>
<P>&#20854;&#20013;&#20004;&#20010;&#21442;&#25968;&#35299;&#37322;&#22914;&#19979;&#65306;&nbsp;</P>
<P>(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool_constexpr:&nbsp;&nbsp; <SPAN class=clozed>&#32534;&#35793;&#26399;</SPAN>&#24120;&#37327;&#34920;&#36798;&#24335;&#65292;&#21487;&#36716;&#25442;&#20026;bool &#31867;&#22411;</P>
<P>(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message: &#23383;&#31526;&#20018;&#23383;&#38754;&#37327; &#65292;&#26159;&#26029;&#35328;&#22833;&#36133;&#26102;&#26174;&#31034;&#30340;&#35686;&#21578;&#20449;&#24687;&#12290;&#33258;C++17&#36215;&#65292;message&#26159;&#21487;&#36873;&#30340;</P>
<P>&nbsp;&#20030;&#20363;&#65306;&#19979;&#38754;&#30340;&#35821;&#21477;&#33021;&#22815;&#30830;&#20445;&#35813;&#31243;&#24207;&#22312;32&#20301;&#30340;&#24179;&#21488;&#19978;&#32534;&#35793;&#36827;&#34892;&#12290;&#22914;&#26524;&#35813;&#31243;&#24207;&#22312;64&#20301;&#24179;&#21488;&#19978;&#32534;&#35793;&#65292;&#23601;&#20250;&#25253;&#38169;</P>
<P>static_assert(sizeof(void *) == 4, "64-bit code generation is not supported.");</P>
<P>&nbsp;</P>
<P>static_assert&#30340;&#29992;&#36884;&#65306;&#24120;&#29992;&#22312;&#27169;&#29256;&#32534;&#31243;&#20013; &#65292;&#23545;&#20889;&#24211;&#30340;&#20316;&#32773;&#29992;&#22788;&#22823;</P>
<P>&#22312;static_assert&#30340;&#31532;&#19968;&#20010;&#21442;&#25968; bool_constexpr&nbsp; &#20013;&#19981;&#33021;&#26377;&#21464;&#37327;&#34920;&#36798;&#24335;
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2565">Item #2,565: assert()&#20381;&#36182;&#20110;NDEBUG &#23439;  NDEBUG&#36825;&#20010;&#23439;&#26159;C/C++&#26631;&#20934;&#35268;&#23450;&#30340;&#65292;&#25152;&#26377;&#32534;&#35793;&#22120;&#37117;&#26377;&#23545;&#23427;&#30340;&#25903;&#25345;&#12290;  1. &#35843;&#35797;(Debug)&#27169;&#24335;&#32534;&#35793;&#26102;&#65292;&#32534;&#35793;&#22120;&#19981;&#20250;&#23450;&#20041;NDEBUG&#65292;&#25152;&#20197;assert()&#23439;&#36215;&#20316;&#29992; 2. &#21457;&#34892;(Release)&#27169;&#24335;&#32534;&#35793;&#26102;&#65292;&#32534;&#35793;&#22120;&#33258;&#21160;&#23450;&#20041;&#23439;NDEBUG&#65292;&#20351;assert&#19981;&#36215;&#20316;&#29992; .</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
assert()&#20381;&#36182;&#20110;NDEBUG &#23439; 
<P></P>
<P>NDEBUG&#36825;&#20010;&#23439;&#26159;C/C++&#26631;&#20934;&#35268;&#23450;&#30340;&#65292;&#25152;&#26377;&#32534;&#35793;&#22120;&#37117;&#26377;&#23545;&#23427;&#30340;&#25903;&#25345;&#12290; </P>
<P>1. &#35843;&#35797;(Debug)&#27169;&#24335;&#32534;&#35793;&#26102;&#65292;&#32534;&#35793;&#22120;&#19981;&#20250;&#23450;&#20041;NDEBUG&#65292;&#25152;&#20197;assert()&#23439;&#36215;&#20316;&#29992;</P>
<P>2. &#21457;&#34892;(Release)&#27169;&#24335;&#32534;&#35793;&#26102;&#65292;&#32534;&#35793;&#22120;&#33258;&#21160;&#23450;&#20041;&#23439;NDEBUG&#65292;&#20351;assert&#19981;&#36215;&#20316;&#29992;</P>
<P>&#22914;&#26524;&#35201;&#24378;&#21046;&#20351;&#24471;assert()&#29983;&#25928;&#25110;&#32773;&#20351;&#24471;assert()&#19981;&#29983;&#25928;&#65292;&#21482;&#35201;&#25163;&#21160; #define NDEBUG &#25110;&#32773; #undef NDEBUG&#21363;&#21487;&#12290;</P>
<P>&nbsp;</P>
<P>static_assert (bool_constexpr, message)</P>
<P>&#20854;&#20013;&#20004;&#20010;&#21442;&#25968;&#35299;&#37322;&#22914;&#19979;&#65306;&nbsp;</P>
<P>(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool_constexpr:&nbsp;&nbsp; <SPAN class=cloze>[...]</SPAN>&#24120;&#37327;&#34920;&#36798;&#24335;&#65292;&#21487;&#36716;&#25442;&#20026;bool &#31867;&#22411;</P>
<P>(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message: &#23383;&#31526;&#20018;&#23383;&#38754;&#37327; &#65292;&#26159;&#26029;&#35328;&#22833;&#36133;&#26102;&#26174;&#31034;&#30340;&#35686;&#21578;&#20449;&#24687;&#12290;&#33258;C++17&#36215;&#65292;message&#26159;&#21487;&#36873;&#30340;</P>
<P>&nbsp;&#20030;&#20363;&#65306;&#19979;&#38754;&#30340;&#35821;&#21477;&#33021;&#22815;&#30830;&#20445;&#35813;&#31243;&#24207;&#22312;32&#20301;&#30340;&#24179;&#21488;&#19978;&#32534;&#35793;&#36827;&#34892;&#12290;&#22914;&#26524;&#35813;&#31243;&#24207;&#22312;64&#20301;&#24179;&#21488;&#19978;&#32534;&#35793;&#65292;&#23601;&#20250;&#25253;&#38169;</P>
<P>static_assert(sizeof(void *) == 4, "64-bit code generation is not supported.");</P>
<P>&nbsp;</P>
<P>static_assert&#30340;&#29992;&#36884;&#65306;&#24120;&#29992;&#22312;&#27169;&#29256;&#32534;&#31243;&#20013; &#65292;&#23545;&#20889;&#24211;&#30340;&#20316;&#32773;&#29992;&#22788;&#22823;</P>
<P>&#22312;static_assert&#30340;&#31532;&#19968;&#20010;&#21442;&#25968; bool_constexpr&nbsp; &#20013;&#19981;&#33021;&#26377;&#21464;&#37327;&#34920;&#36798;&#24335;
</td>
</tr>
<tr>
<td bordercolor="#0066FF" bgcolor="#D0E8FF"> 
&#32534;&#35793;&#26399;
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://super-memory.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.super-memory.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<p><b>Author: sm18-lazy-package</b><br>
<a href="http://super-memory.com">super-memory.com</a><br>
date: 4/27/2024 6:25:45 PM<br>
Page generated with:<br> SuperMemo 18<br>Build: 18.05 of Oct 29, 2020
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
